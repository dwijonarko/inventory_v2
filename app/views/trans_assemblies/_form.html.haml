- semantic_form_for @trans_assembly do |f|
  = f.error_messages
  - f.inputs "Assembling", :class => "form_section" do
    %li.string.required
      = f.label :number, :class => 'required'
      .inline
        = f.text_field :number
        %br
        %p.inline-hints.inline-labels Number
      .inline
        = f.text_field :date, :class => "datepicker"
        %br
        %p.inline-hints.inline-labels Date
 
    = f.input :warehouse, :collection => @warehouses, :as => :select, :label => "Warehouse", :include_blank => "select Warehouse", :input_html => {:class => "select"}
    = f.input :description, :input_html => { :rows => 3 }

  - f.inputs 'Items From Formula Assembling', :class => "form_section" do
    %li
      %table.report
        %thead
          %tr
            %th.tdl.td_20 Assembled Item Name
            %th End Product
            %th Quantity
        %tfoot
          %tr
            %td &nbsp;
            %td{ :colspan => 3 } &nbsp;
        %tbody
          - unless @trans_assembly.entries.blank?
            - f.semantic_fields_for :entries do |ent|
              %tr
                %td.item
                  = ent.text_field :assembly_name, :class => "assembled_item_autocomplete"
                  = ent.hidden_field :assembly_id
                %td.assembly_end_product= ent.object.item_name
                %td.tdr.td_15
                  = ent.text_field :quantity, :class => "numbers", :size => 5


  %fieldset.buttons
    %button{ :type => "submit" }
      = image_tag 'icons/silk/disk.png'
      Save Transaction Assembling


- content_for :javascripts do
  - javascript_tag do
    var insert_fields = true;
    var template = $('tbody tr:last-child').html();
    var regexp1 = new RegExp("\\[(\\d+)\\]", "g");
    var regexp2 = new RegExp("_(\\d+)_", "g");
    var new_id = $('tbody tr').length;
    :plain
      function get_entries(form) {
        form.append('<input type="hidden" name="get_ones" value="1"/>');
        $.ajax({
          url: form[0].action,
          type: 'post',
          data: form.serialize(),
          success: function(response, status) {
            var entries = $(response).find('tbody');
            form.find('tbody').html(entries.html());
            $('input[name=get_ones]').remove();
          }
        });
      }
      $(function() {
        $('#trans_assembly_assembly_id').bind('multiselectclose', function(event, ui) {
          get_entries($(this).parents('form'));
          return false;
        });
        $('#trans_assembly_quantity').change(function() {
          get_entries($(this).parents('form'));
          return false;
        });
      });
      $('input.assembled_item_autocomplete').live('focus', function() {
        var input = $(this);
        input.autocomplete({
          source: '/assemblies/search.js',
          focus:  function(event, ui) { $(this).val(ui.item.name); return false; },
          select: function(event, ui) {
            //console.log(ui);
            $(this).val(ui.item.name);
            $(this).next().val(ui.item.id);
            $(this).parents('tr').find('.assembly_end_product').html(ui.item.item_name);
            var form = $(this).parents('form');
            // run when you want to add new set of inputs
            if(window.insert_fields) {
              var elem = template.replace(regexp1, "[" + new_id + "]");
              elem = elem.replace(regexp2, "_" + new_id + "_");
              elem = "<tr>" + elem + "</tr>";
              input.parents('tr').after(elem);
              $('.should_hidden').hide();
              attach_datepicker();
              new_id++;
            }
            return false;
          }
        })
        .data("autocomplete")
        ._renderItem = function(ul, item) {
          return $("<li></li>")
          .data("item.autocomplete", item)
          .append("<a>" + item.name + "</a>")
          .appendTo(ul);
        };
      });

