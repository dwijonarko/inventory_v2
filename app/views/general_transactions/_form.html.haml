- if current_company.transaction_types.blank?
  #flash_error.no_record
    %h5 Sorry, but you have to at least have 1 transaction type before you can create any transaction.
    %h6= link_to "Click here to add transaction type", new_transaction_type_path
- else
  - semantic_form_for @general_transaction do |f|
    = f.error_messages
    - f.inputs do
      = f.input :transaction_type, :collection => @transaction_types, :include_blank => "Select the transaction type", :input_html => { :class => "select" }
      %li#general_transaction_number_input.string.required
        %label{ :for => 'general_transaction_number' } Number <span class="required">*</span>
        %input{ :type => :text, :size => 50,
                :name => 'general_transaction[number]',
                :id => 'general_transaction_number',
                :value => f.object.attributes['number'],
                :class => 'default' }
        %p.inline-errors= f.error_message_on :number, :append_text => ", but <strong><a href='#' rel='#{@number_suggestion}' class='number_suggestion'>#{@number_suggestion}</a></strong> is available"

      = f.input :originator_warehouse, :include_blank => false, :input_html => { :class => 'select plu_source' }, :collection => @warehouses
      = f.input :destination_warehouse, :include_blank => false, :input_html => { :class => 'select' }, :collection => @warehouses
      = f.input :remark, :input_html => { :rows => 2 }

      %li.string
        #items
          %table#transaction_entries.list
            %thead
              %tr
                %th.td_20 PLU Code
                %th.td_50 Item
                %th.actions.td_10 Quantity
                %th.actions.td_20 @ Value
            %tfoot
              %tr
                %td{ :colspan => 4 }
                  %a{:href => '#', :id => 'add_entries'}
                    = "#{image_tag('icons/silk/add.png')} add transaction entries"
            %tbody
              - f.semantic_fields_for :entries do |entry|
                %tr
                  %td.td_20
                    = entry.text_field :plu_code, :class => 'plu_code'
                    = entry.hidden_field :plu_id
                    = link_to image_tag('icons/silk/magnifier.png'), lookup_items_path(:format => :js), :class => 'plu_input'
                  %td= entry.object.plu.try(:item).try(:name_with_code)
                  %td.actions.td_10
                    = entry.text_field :quantity, :size => 10, :class => 'numbers entries_quantity'
                  %td.actions.td_20= entry.text_field :value, :size => 30, :class => 'numbers entries_value'


      %fieldset.buttons
        %button#primary-button{ :type => :submit }= "#{image_tag('icons/silk/disk.png')} Save Transaction"

- javascript 'item_transfer'
- javascript 'general_transaction'
- content_for :javascripts do
  - javascript_tag do
    var template = $('tbody tr:last-child').html();
    var regexp1 = new RegExp("\\[(\\d+)\\]", "g");
    var regexp2 = new RegExp("_(\\d+)_", "g");
    var new_id = $('tbody tr').length;
    var with_value = true;
    var model = 'general_transaction';
    var stale = true;
    var t_types = new Array();
    - @transaction_types.each do |tt|
      = "t_types[#{tt.id}] = '#{tt.to_json(:methods => [:next_available_number, :entries_value, :should_validating_quantity], :only => [:id, :name, :code, :direction])}';"
    = "var plu = #{@plus.to_json(:only => [:id, :code], :methods => :item_name_with_code)};"

    :plain
      $(function() {
        if(typeof($('#general_transaction_transaction_type_id').multiselect('getChecked')[0]) == 'undefined') {
          $('#general_transaction_number_input').hide();
          $('#general_transaction_originator_warehouse_input').hide();
          $('#general_transaction_destination_warehouse_input').hide();
          $('#general_transaction_remark_input').hide();
          $('#items').hide();
          $('fieldset.buttons').hide();
        }
        $('#general_transaction_transaction_type_id').bind('multiselectclick', function(event, ui) {
          var ttype = $(this).multiselect('getChecked')[0];
          if (typeof(ttype) != 'undefined') {
            obj = eval('(' + t_types[parseInt(ttype.value)] + ')');
            $('body').data('next_number', obj.next_available_number);
            $('#general_transaction_number_input').show();
            if(stale || $('#general_transaction_number_input input').val() == '') {
              $('#general_transaction_number_input input').val(obj.next_available_number).focus();
            }
            $('#general_transaction_remark_input').show();
            $('#items').show();
            $('fieldset.buttons').show();
            if(obj.direction === 0) {
              $('#general_transaction_originator_warehouse_input').hide();
              $('#general_transaction_destination_warehouse_input').show();
            }
            if(obj.direction === 1) {
              $('#general_transaction_originator_warehouse_input').show();
              $('#general_transaction_destination_warehouse_input').hide();
            }
            if(obj.direction === 2) {
              $('#general_transaction_originator_warehouse_input').show();
              $('#general_transaction_destination_warehouse_input').show();
            }
          }
        });
        $('.select').bind('multiselectclick', function(event, ui) { $(this).multiselect('close'); });
      });
      $('.plu_code').live('focus', function() {
        var input = $(this);
        input.autocomplete({
          source: '/plus/search.js',
          focus: function(event, ui) { input.val(ui.item.code); },
          select: function(event, ui) {
            var elem = template.replace(regexp1, "[" + new_id + "]");
            elem = elem.replace(regexp2, "_" + new_id + "_");
            input.parents('tr').after("<tr>" + elem + "</tr>");
            new_id++;
            input.val(ui.item.code);
            input.next('input[type=hidden]').val(ui.item.id);
            input.parent().next().html(ui.item.item.name_with_code);
            input.parent().next().next().children().val(0).select();
            return true;
          }
        })
        .data("autocomplete")
        ._renderItem = function(ul, item) {
          return $("<li></li>")
          .data("item.autocomplete", item)
          .append("<a>" + item.item.name_with_code + "</a>")
          .appendTo(ul);
        };
      });

