- semantic_form_for @trans_diassembly do |f|
  = f.error_messages
  - f.inputs "Disassembling", :class => "form_section" do
    %li.string.required
      = f.label :number, :class => 'required'
      .inline
        = f.text_field :number
        %br
        %p.inline-hints.inline-labels Number
      .inline
        = f.text_field :tanggal, :class => "datepicker"
        %br
        %p.inline-hints.inline-labels Date
 
    = f.input :warehouse, :collection => @warehouses, :as => :select, :label => "Warehouse", :include_blank => "select Warehouse", :input_html => {:class => "select"}, :required => true
    = f.input :assembly_name, :as => :string, :label => "Item to disassembled", :input_html => {:class => "assembly_autocomplete"}, :required => true 
    = f.input :assembly_id, :as => :hidden, :input_html => {:id => 'assembly_id'}
    = f.input :quantity, :input_html => { :id => 'disassembled_item_quantity' }  
    = f.input :description, :input_html => { :rows => 3 }

  - f.inputs 'Items From Transaction Assembling', :class => "form_section" do
    %li
      %table.report
        %thead
          %tr
            %th Item
            %th Qty in Formula
            %th Quantity
            %th 
        %tfoot
          %tr
            %td{ :colspan => 4 } &nbsp;
        %tbody
          - f.semantic_fields_for :entries do |ent|
            %tr
              %td.item
                = ent.object.item.name
                = ent.hidden_field :item_id
              %td.numbers.formula_quantity= ent.object.formula_quantity
              %td.tdr.td_15.numbers
                %span.component_quantity= ent.object.quantity
                = ent.hidden_field :quantity, :class => "numbers mr_qty component_quantity"
              %td.tdr
                = link_to image_tag('icons/silk/cross.png'), '#', :class => "row_remover"


  %fieldset.buttons
    %button{ :type => "submit" }
      = image_tag 'icons/silk/disk.png'
      Save Diassembling


- content_for :javascripts do
  - javascript_tag do
    var insert_fields = true;
    :plain
      //var template = $('tbody tr:last-child').html();
      //var regexp1 = new RegExp("\\[(\\d+)\\]", "g");
      //var regexp2 = new RegExp("_(\\d+)_", "g");
      //var new_id = $('tbody tr').length;
      $('#assembly_id').change( function() {
        var form = $(this).parents('form');
        $.ajax({
          source: '/assemblies/new',
          data: form.serialize(),
          success: function(response, status) {
            var tbody = $(response).find('tbody').html();
            form.find('tbody').replaceWith(tbody);
          }
        })
      });
      $('#disassembled_item_quantity').live('change', function() {
        var disassmbled_quantity = parseInt($(this).val());
        $('input[type=hidden].component_quantity').each(function(i, input_elem) {
          var comp_qty = $(input_elem).parents('tr').find('.formula_quantity').html() * disassmbled_quantity;
          $(input_elem).prev().html(comp_qty);
          input_elem.value = comp_qty;
        });
      });
